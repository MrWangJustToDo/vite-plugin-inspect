/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>, '//[...all]' | '//metric' | '//module' | '//plugins'>,
    '//[...all]': RouteRecordInfo<'//[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '//metric': RouteRecordInfo<'//metric', '/metric', Record<never, never>, Record<never, never>>,
    '//module': RouteRecordInfo<'//module', '/module', Record<never, never>, Record<never, never>>,
    '//plugins': RouteRecordInfo<'//plugins', '/plugins', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'pages/index.vue': {
      routes: '/' | '//[...all]' | '//metric' | '//module' | '//plugins'
      views: 'default'
    }
    'pages/index/[...all].vue': {
      routes: '//[...all]'
      views: never
    }
    'pages/index/metric.vue': {
      routes: '//metric'
      views: never
    }
    'pages/index/module.vue': {
      routes: '//module'
      views: never
    }
    'pages/index/plugins.vue': {
      routes: '//plugins'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
